cor(bivariate_df$x,bivariate_df$y,method = "spearman")
cor(synthetic$df[,1],synthetic$df[,2],method = "spearman")
x
cor(rnorm(100,0,1),rnorm(100,0,1))
cor(rnorm(100,0,1),rnorm(100,0,1),method = "spearman")
cor(bivariate_df$x,bivariate_df$y,method = "spearman")
round(cor(bivariate_df$x,bivariate_df$y,method = "spearman"),4)
round(cor(rnorm(100,0,1),rnorm(100,0,1),method = "spearman"),4)
round(cor(synthetic$df[,1],synthetic$df[,2],method = "spearman"),4)
set.seed(12)
round(cor(rnorm(100,0,1),rnorm(100,0,1),method = "spearman"),4)
set.seed(12)
round(cor(rnorm(100,0,1),rnorm(100,0,1),method = "spearman"),4)
sigma
# Plot the data
plot(bivariate_df, main = "Bivariate Normal Distribution", xlab = "X", ylab = "Y", pch = 16, col = "blue")
set.seed(12)
round(cor(rnorm(100,0,1),rnorm(100,0,1),method = "spearman"),4)
set.seed(12)
plot(rnorm(100,0,1),rnorm(100,0,1))
plot(synthetic$df[,1],synthetic$df[,2])
plot(
bivariate_df,
main = "Bivariate Normal Distribution",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0, 0, 1, 0.6), # Semi-transparent blue
cex = 1.2 # Larger points
)
grid()
box(lwd = 2)
plot(
bivariate_df,
main = "Bivariate Normal Distribution",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0, 0, 1, 0.6), # Semi-transparent blue
cex = 1.2 # Larger points
)
grid()
mtext("Original Data Plot", side = 1, line = 5, cex = 1, col = "black")
plot(
bivariate_df,
main = "Bivariate Normal Distribution",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0, 0, 1, 0.6), # Semi-transparent blue
cex = 1.2 # Larger points
)
grid()
mtext("Original Data Plot", side = 1, line = 5, cex = 1, col = "black")
mtext("Original Data Plot", cex = 1, col = "black")
plot(
bivariate_df,
main = "Bivariate Normal Distribution",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0, 0, 1, 0.6), # Semi-transparent blue
cex = 1.2 # Larger points
)
grid()
mtext("Original Data Plot", cex = 1, col = "black")
plot(
bivariate_df,
main = "Original Data Plot",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0, 0, 1, 0.6), # Semi-transparent blue
cex = 1.2 # Larger points
)
plot(
bivariate_df,
main = "Original Data Plot",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(1, 0.5, 0, 0.6), # Semi-transparent orange
cex = 1.2 # Larger points
)
grid()
par(mfrow=c(1,2))
plot(synthetic$df[,1],synthetic$df[,2])
set.seed(12)
plot(rnorm(100,0,1),rnorm(100,0,1))
par(mfrow=c(1,2))
plot(
synthetic$df,
main = "SDGCopula Generated Data",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(1, 0.5, 0, 0.6), # Semi-transparent orange
cex = 1.2 # Larger points
)
plot(
synthetic$df,
main = "SDGCopula Generated Data",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0.5, 0, 0.5), #purple
cex = 1.2 # Larger points
)
plot(
synthetic$df,
main = "SDGCopula Generated Data",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0.5, 0, 0.5, 0.6), #purple
cex = 1.2 # Larger points
)
set.seed(12)
x = rnorm(100,0,1)
set.seed(14)
y = rnorm(100,0,1)
round(cor(x,y,method = "spearman"),4)
set.seed(12)
x = rnorm(100,0,1)
set.seed(14)
y = rnorm(100,0,1)
round(cor(x,y,method = "spearman"),4)
set.seed(10)
x = rnorm(100,0,1)
set.seed(14)
y = rnorm(100,0,1)
round(cor(x,y,method = "spearman"),4)
set.seed(1)
x = rnorm(100,0,1)
set.seed(14)
y = rnorm(100,0,1)
round(cor(x,y,method = "spearman"),4)
plot(
x=x,y=y,
main = "Data Generated Using Marginals ",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0.5, 0, 0.5, 0.6), #semi-transparant purple
cex = 1.2 # Larger points
)
grid()
plot(
x=x,y=y,
main = "Data Generated Using Marginals ",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0, 0.5, 1, 0.6), #semi-transparant azure
cex = 1.2 # Larger points
)
grid()
plot(
synthetic$df,
main = "SDGCopula Generated Data",
xlab = "X",
ylab = "Y",
pch = 16,
col = rgb(0.5, 0, 0.5, 0.6), #semi-transparant purple
cex = 1.2 # Larger points
)
grid()
n=500
p=5
X = matrix(nrow=n,ncol=p)
for(i in 1:p){
X[,i] = rnorm(n)
}
pairs(X)
cor(X)
pca = princomp(X,scores = T)
pca$loadings
pca$loadings
plot(pca)
getwd()
data = read.csv("D:\Bharat\College\SPPU Material\SPPU Syllabus\CISM\ATM Transaction Study\atm_transactions.csv")
data = read.csv("D:/Bharat/College/SPPU Material/SPPU Syllabus/CISM/ATM Transaction Study/atm_transactions.csv")
data =
View(data)
data = read.csv("D:/Bharat/College/SPPU Material/SPPU Syllabus/CISM/ATM Transaction Study/atm_transactions.csv")
data =
View(data)
data = read.csv("D:/Bharat/College/SPPU Material/SPPU Syllabus/CISM/ATM Transaction Study/atm_transactions.csv")
data =
View(data)
data = read.csv("D:/Bharat/College/SPPU Material/SPPU Syllabus/CISM/ATM Transaction Study/atm_transactions.csv")
filtered_data = data %>% select(data$atmId, data$totalBalance, data$numberIncomeTransaction, data$numberOutcomeTransaction,
data$totalIncome, data$totalOutcome, data$totalNumberTransaction, data$day, data$transactionTime)
library(dplyr)
filtered_data = data %>% select(data$atmId, data$totalBalance, data$numberIncomeTransaction, data$numberOutcomeTransaction,
data$totalIncome, data$totalOutcome, data$totalNumberTransaction, data$day, data$transactionTime)
filtered_data = data %>% select(atmId, totalBalance, numberIncomeTransaction, numberOutcomeTransaction,
totalIncome, totalOutcome, totalNumberTransaction, day, transactionTime)
filtered_data_OM = data %>% filter(ID == atm350000)
filtered_data_OM = data %>% filter(atmId == atm350000)
filtered_data_OM = data %>% filter(atmId == 'atm350000')
filtered_data_OM = data %>% filter(atmId == 'atm350000')
View(filtered_data_OM)
filtered_data_OM = filtered_data %>% filter(atmId == 'atm350000')
View(filtered_data_OM)
# Generate a sequence of daily dates
start_date <- as.Date("2025-01-01")
end_date <- as.Date("2025-01-30")
# Generate a sequence of daily dates
start_date <- as.Date("2025-01-01")
end_date <- as.Date("2025-01-30")
date_sequence <- seq.Date(start_date, end_date, by = "day")
date_sequence
start_time <- as.POSIXct("2025-01-01 00:00:00")
end_time <- as.POSIXct("2025-01-30 23:00:00")
timestamp_sequence <- seq.POSIXt(start_time, end_time, by = "hour")
print(timestamp_sequence)
length(timestamp_sequence)
30*24
X = matrix(nrow=length(timestamp_sequence),col=1)
X = matrix(nrow=length(timestamp_sequence),ncol=1)
head( format(as.POSIXct(timestamp_sequence), format = "%H:%M:%S"))
time = (format(as.POSIXct(timestamp_sequence), format = "%H:%M:%S"))
length(time)
date = as.Date(timestamp_sequence)
length(date)
length(unique(date))
head(date)
date
View(timestamp_sequence)
head(timestamp_sequence)
tail(timestamp_sequence)
head(time)
X = matrix(nrow=length(timestamp_sequence),ncol=3)
X[,1] = date
X[,2] = time
View(time)
View(X)
data <- data.frame(
Date = date,
Time = time
)
View(data)
30*24
end_time <- as.POSIXct("2025-01-31 23:00:00")
timestamp_sequence <- seq.POSIXt(start_time, end_time, by = "hour")
length(timestamp_sequence)
time = (format(as.POSIXct(timestamp_sequence), format = "%H:%M:%S"))
head(time)
date = as.Date(timestamp_sequence)
length(unique(date))
data <- data.frame(
Date = date,
Time = time
)
View(data)
timestamp_sequence
date
head(date)
date[1:6]
type(date)
class(date)
date[1:6] = as.Date("2025-01-01")
head(date)
data <- data.frame(
Date = date,
Time = time
)
View(data)
length(unique(date))
for(i in 1:length(unique(data$Date))){
print(i)
}
for(i in 1:length(unique(data$Date))){
print(unique(data$Date)[i])
}
class(unique(data$Date)[i])
"2025-01-01":"2025-01-10"
first_10_days = as.Date(start = "2025-01-01",end="2025-01-10",by="day")
first_10_days = seq.Date(start = as.Date("2025-01-01"),end=as.Date("2025-01-10"),by="day")
first_10_days = seq.Date(from = as.Date("2025-01-01"),end=as.Date("2025-01-10"),by="day")
first_10_days = seq.Date(from = as.Date("2025-01-01"),to=as.Date("2025-01-10"),by="day")
first_10_days
unique(data$Date)[i] in first_10_days
unique(data$Date)[i] %in% first_10_days
unique(data$Date)[i]
num_of_people = c()
data$Time[i]
9AM_to_9PM = seq.POSIXt(as.POSIXct("09:00:00"), as.POSIXct("21:00:00"), by = "hour")
NineAM_to_9PM = seq.POSIXt(as.POSIXct("09:00:00"), as.POSIXct("21:00:00"), by = "hour")
sprintf("%02d:00", 0:23,0,0)
time[9]
time[10]
time[22]
22
NineAM_to_9PM = time[10:22]
NineAM_to_9PM
time[23]
time[10]
NinePM_to_9AM = time[23:10]
NinePM_to_9AM
NineAM_to_9PM = time[11:22]
NineAM_to_9PM
NinePM_to_9AM
nrow(data)
num_of_people = matrix(nrow=nrow(data),ncol=1)
time[1]
time[23]
time[24]
time[48]
time[720]
length(time)
rpois(1,7)
rpois(1,lambda=7)
rpois(1,lambda=7)
first_11_20_days = seq.Date(from = as.Date("2025-01-11"),to=as.Date("2025-01-20"),by="day")
first_11_20_days
last_10_days = seq.Date(from = as.Date("2025-01-21"),to=as.Date("2025-01-31"),by="day")
last_10_days
Date{1}
data$Date[1]
data$Time[1]
NineAM_to_9PM = time[11:22]
NineAM_to_9PM
num_of_people = matrix(nrow=nrow(data),ncol=1)
for(i in 1:length(data$Date)){
#print(unique(data$Date)[i])
if(data$Date[i] %in% first_10_days){
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 7)
}else{
num_of_people[i, ] = rpois(1,lambda = 2)
}
}
if(data$Date[i] %in% first_11_20_days){
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 5)
}else{
num_of_people[i, ] = rpois(1,lambda = 1)
}
}
if(data$Date[i] %in% last_10_days){
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 6)
}else{
num_of_people[i, ] = rpois(1,lambda = 1.5)
}
}
}
View(X)
View(num_of_people)
boxplot(num_of_people)
density(num_of_people)
plot(density(num_of_people))
barplot(num_of_people)
barplot(c(num_of_people))
num_of_customer = c(num_of_people)
num_of_customer
data$num_of_customer = num_of_customer
View(data)
plot(density(rexp(100,rate=2000)))
transaction = c()
set.seed(1)
for(i in 1:length(data$Date)){
#print(unique(data$Date)[i])
if(data$Date[i] %in% first_10_days){
transaction[i] = rexp(1,2000)
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 7)
}else{
num_of_people[i, ] = rpois(1,lambda = 2)
}
}
if(data$Date[i] %in% first_11_20_days){
transaction[i] = rexp(1,1500)
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 5)
}else{
num_of_people[i, ] = rpois(1,lambda = 1)
}
}
if(data$Date[i] %in% last_10_days){
transaction[i] = rexp(1,1000)
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 6)
}else{
num_of_people[i, ] = rpois(1,lambda = 1.5)
}
}
}
data$transaction = transaction
View(data)
set.seed(1)
for(i in 1:length(data$Date)){
#print(unique(data$Date)[i])
if(data$Date[i] %in% first_10_days){
transaction[i] = rexp(1,1/2000)
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 7)
}else{
num_of_people[i, ] = rpois(1,lambda = 2)
}
}
if(data$Date[i] %in% first_11_20_days){
transaction[i] = rexp(1,1/1500)
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 5)
}else{
num_of_people[i, ] = rpois(1,lambda = 1)
}
}
if(data$Date[i] %in% last_10_days){
transaction[i] = rexp(1,1/1000)
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 6)
}else{
num_of_people[i, ] = rpois(1,lambda = 1.5)
}
}
}
num_of_customer = c(num_of_people)
data$num_of_customer = num_of_customer
data$transaction = transaction
View(data)
data$transaction = round(transaction,2)
View(data)
getwd()
setwd(D:/Bharat/College/SPPU Material/SPPU Syllabus/CISM/ATM Transaction Study)
setwd("D:/Bharat/College/SPPU Material/SPPU Syllabus/CISM/ATM Transaction Study")
write.csv(data,file = "atm_transactions_simulated.csv")
transaction = c()
set.seed(1)
for(i in 1:length(data$Date)){
#print(unique(data$Date)[i])
if(data$Date[i] %in% first_10_days){
transaction[i] = rexp(1,1/2000)
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 7)
}else{
num_of_people[i, ] = rpois(1,lambda = 2)
}
}
if(data$Date[i] %in% first_11_20_days){
transaction[i] = rexp(1,1/1500)
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 5)
}else{
num_of_people[i, ] = rpois(1,lambda = 1)
}
}
if(data$Date[i] %in% last_10_days){
transaction[i] = rexp(1,1/1000)
if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 6)
}else{
num_of_people[i, ] = rpois(1,lambda = 1.5)
}
}
}
num_of_customer = c(num_of_people)
data$num_of_customer = num_of_customer
data$transaction = round(transaction)
View(data)
write.csv(data,file = "atm_transactions_simulated.csv")
length(data[,data$transaction == 0])
nrow(data[,data$transaction == 0])
(data[,data$transaction == 0])
(data[data$transaction == 0,])
data[,data$num_of_customer == 0]
data[data$num_of_customer == 0]
data[data$num_of_customer == 0,]
nrow(data[data$num_of_customer == 0,])
d = read.csv("atm_transactions_simulated.csv")
View(d)
cumsum(d$transaction)
for(i in d$transaction){
print(i)
}
X = matrix(nrow=15,ncol=2)
apply(d$transaction,FUN = sum)
length(d$transaction)
sum(d$transaction)
sum=0
cnt=0
i=1
repeat{
sum = sum + d$transaction[i]
cnt = cnt+1
if(sum>10000){
sum = sum - d$transaction[i]
cat(cnt,sum)
sum = 0
cnt = 0
break
}
i = i+1
}
cumulative_sum = 0
num_hours = 0
target_amount = 100000
for (i in 1:nrow(d)) {
cumulative_sum = cumulative_sum + d$transaction[i]
num_hours = num_hours + 1
if (cumulative_sum >= target_amount) {
break
}
}
result <- data.frame(
cumulative_amount = cumulative_sum,
number_of_hours = num_hours
)
result
