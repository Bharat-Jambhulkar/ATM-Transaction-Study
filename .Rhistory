if(data$Time[i] %in% NineAM_to_9PM){
num_of_people[i, ] = rpois(1,lambda = 6)
}else{
num_of_people[i, ] = rpois(1,lambda = 1.5)
}
}
}
num_of_customer = c(num_of_people)
data$num_of_customer = num_of_customer
data$transaction = round(transaction)
View(data)
write.csv(data,file = "atm_transactions_simulated.csv")
length(data[,data$transaction == 0])
nrow(data[,data$transaction == 0])
(data[,data$transaction == 0])
(data[data$transaction == 0,])
data[,data$num_of_customer == 0]
data[data$num_of_customer == 0]
data[data$num_of_customer == 0,]
nrow(data[data$num_of_customer == 0,])
d = read.csv("atm_transactions_simulated.csv")
View(d)
cumsum(d$transaction)
for(i in d$transaction){
print(i)
}
X = matrix(nrow=15,ncol=2)
apply(d$transaction,FUN = sum)
length(d$transaction)
sum(d$transaction)
sum=0
cnt=0
i=1
repeat{
sum = sum + d$transaction[i]
cnt = cnt+1
if(sum>10000){
sum = sum - d$transaction[i]
cat(cnt,sum)
sum = 0
cnt = 0
break
}
i = i+1
}
cumulative_sum = 0
num_hours = 0
target_amount = 100000
for (i in 1:nrow(d)) {
cumulative_sum = cumulative_sum + d$transaction[i]
num_hours = num_hours + 1
if (cumulative_sum >= target_amount) {
break
}
}
result <- data.frame(
cumulative_amount = cumulative_sum,
number_of_hours = num_hours
)
result
d = read.csv("atm_transactions_simulated.csv")
View(d)
library(dplyr)
daily_summary <- d %>%
group_by(date) %>%
mutate(cumulative_sum = cumsum(transaction))
daily_summary <- d %>%
group_by(Date) %>%
mutate(cumulative_sum = cumsum(transaction))
daily_summary
# Load the data
atm_data <- read.csv("atm_transactions_simulated.csv")
# Combine Date and Time into a single datetime column
atm_data$datetime <- as.POSIXct(paste(atm_data$Date, atm_data$Time), format = "%d-%m-%Y %H:%M:%S")
# Add a 'date' column for grouping by day
atm_data$date <- as.Date(atm_data$datetime)
# Calculate cumulative sum for each day
library(dplyr)
daily_summary <- atm_data %>%
group_by(date) %>%
mutate(cumulative_sum = cumsum(transaction))
# Find the time when the cumulative sum exceeds ₹1 lakh
time_to_1lakh <- daily_summary %>%
filter(cumulative_sum >= 1e5) %>%
summarise(hours_to_1lakh = difftime(min(datetime), as.POSIXct(paste(unique(date), "00:00:00")), units = "hours"),
.groups = "drop")
# Calculate the average number of hours across all days
average_hours <- mean(as.numeric(time_to_1lakh$hours_to_1lakh), na.rm = TRUE)
# Find the time when the cumulative sum exceeds ₹1 lakh
time_to_1lakh <- daily_summary %>%
filter(cumulative_sum >= 1e5) %>%
summarise(hours_to_1lakh = difftime(min(datetime), as.POSIXct(paste(unique(date), "00:00:00")), units = "hours"),
.groups = "drop")
# Load the data
atm_data <- read.csv("atm_transactions_simulated.csv")
# Combine Date and Time into a single datetime column
atm_data$datetime <- as.POSIXct(paste(atm_data$Date, atm_data$Time), format = "%d-%m-%Y %H:%M:%S")
# Add a 'date' column for grouping by day
atm_data$date <- as.Date(atm_data$datetime)
# Calculate cumulative sum for each day
library(dplyr)
daily_summary <- atm_data %>%
group_by(date) %>%
mutate(cumulative_sum = cumsum(transaction))
# Find the time when the cumulative sum exceeds ₹1 lakh
time_to_1lakh <- daily_summary %>%
filter(cumulative_sum >= 1e5) %>%
summarise(hours_to_1lakh = difftime(min(datetime), as.POSIXct(paste(unique(date), "00:00:00")), units = "hours"),
.groups = "drop")
# Calculate the average number of hours across all days
average_hours <- mean(as.numeric(time_to_1lakh$hours_to_1lakh), na.rm = TRUE)
# Print the result
cat("On average, it takes", round(average_hours, 2), "hours for an ATM to hit the 1 lakh mark in a month.\n")
AT = c()
cumsum(AT)
cumsum(AT)<10
AT[1] = 0
cumsum(AT)<10
nD = 3
ArTFun = function(T0,lambda){
steps = rexp(n,rate=lamda*T0)
i = 1
AT = c()
AT[1] = 0
while(cumsum(AT)<=T0){
AT[i] = AT+rexp(1,rate=lamda*T0)
i = i+1
}
return(AT[-(i-1)])
}
ArTFun(10,5)
ArTFun = function(T0,lambda){
steps = rexp(n,rate=lamda*T0)
i = 1
AT = c()
AT[1] = 0
while(cumsum(AT)<=T0){
AT[i] = AT+rexp(1,rate=lambda*T0)
i = i+1
}
return(AT[-(i-1)])
}
ArTFun(10,5)
ArTFun = function(T0,lambda){
i = 1
AT = c()
AT[1] = 0
while(cumsum(AT)<=T0){
AT[i] = AT+rexp(1,rate=lambda*T0)
i = i+1
}
return(AT[-(i-1)])
}
ArTFun(10,5)
cumsum(AT)
ArTFun = function(T0,lambda){
i = 1
AT = c()
AT[1] = 0
sAT = sum(AT)
while(cumsum(AT)<=T0){
AT[i] = AT+rexp(1,rate=lambda*T0)
i = i+1
}
return(AT[-(i-1)])
}
ArTFun(10,5)
ArTFun = function(T0,lambda){
i = 1
AT = c()
AT[1] = 0
sAT = sum(AT)
while(sAT<=T0){
AT[i] = AT+rexp(1,rate=lambda*T0)
i = i+1
}
return(AT[-(i-1)])
}
ArTFun(10,5)
ArTFun = function(T0,lambda){
i = 1
AT = c()
AT[1] = 0
sAT = sum(AT)
while(sum(AT)<=T0){
AT[i] = AT+rexp(1,rate=lambda*T0)
i = i+1
}
return(AT[-(i-1)])
}
ArTFun(10,5)
warnings()
AT = 0
sum(AT)
ArTFun = function(T0,lambda){
i = 1
AT = c()
while(sum(AT)<=T0){
AT[i] = rexp(1,rate=lambda)
i = i+1
}
AT  = cumsum(AT)
return(AT[-(i-1)])
}
ArTFun(10,5)
ArTFun(10,2)
qpois(0.9999,20)
TransactionMat = c()
TransactionMat = matrix(,ncol=3)
for(i in 1:nD){
n = ArTFun(T1,lambda1)
trsansactions = c()
for(j in 1:n){
trsansactions[j] = rlnorm(1,2000,1)
}
TransactionMat[,i] = trsansactions
}
T1 = 12*60 #trabsaction on minute level.
for(i in 1:nD){
n = ArTFun(T1,lambda1)
trsansactions = c()
for(j in 1:n){
trsansactions[j] = rlnorm(1,2000,1)
}
TransactionMat[,i] = trsansactions
}
lambda1 = 20 #arrival rate at day
lambda2 = 7 #arrival rate at night
TransactionMat = matrix(,ncol=3)
for(i in 1:nD){
n = ArTFun(T1,lambda1)
trsansactions = c()
for(j in 1:n){
trsansactions[j] = rlnorm(1,2000,1)
}
TransactionMat[,i] = trsansactions
}
View(TransactionMat)
rlnorm(10,log(2000),1)
ArTFun(T1,20)
lambda1 = 20/60 #arrival rate at day
lambda1
lambda2 = 7/60 #arrival rate at night
T1 = 12*60 #trabsaction on minute level.
TransactionMat = matrix(,ncol=3)
for(i in 1:nD){
n = ArTFun(T1,lambda1)
trsansactions = c()
for(j in 1:n){
trsansactions[j] = rlnorm(1,2000,1)
}
TransactionMat[,i] = trsansactions
}
View(TransactionMat)
trsansactions
n
TransactionMat = matrix(,ncol=3)
for(i in 1:nD){
n = ArTFun(T1,lambda1)
trsansactions = c()
for(j in 1:length(n)){
trsansactions[j] = rlnorm(1,2000,1)
}
TransactionMat[,i] = trsansactions
}
trsansactions
log(200)
log(2000)
for(i in 1:nD){
n = ArTFun(T1,lambda1)
trsansactions = c()
for(j in 1:length(n)){
trsansactions[j] = rlnorm(1,log(2000),1)
}
TransactionMat[,i] = trsansactions
}
trsansactions
hist(trsansactions)
plot(density(transansactions))
trsans = c()
for(i in 1:nD){
n = ArTFun(T1,lambda1)
trsans = c()
for(j in 1:length(n)){
trsans[j] = rlnorm(1,log(2000),1)
}
TransactionMat[,i] = trsans
}
plot(density(trsans))
summary(trsans)
ArTFun = function(T0,lambda){
i = 1
AT = c()
while(sum(AT)<=T0){
AT[i] = rexp(1,rate=lambda)
i = i+1
}
AT  = cumsum(AT)[-(i-1)]
return(AT)
}
nD = 30 #for three days
T1 = 12*60 #trabsaction on minute level.
lambda1 = 20/60 #arrival rate at day
lambda2 = 7/60 #arrival rate at night
MeanVec = c(rep(log(2000),10),rep(log(1500),10),rep(log(700),10))
SDVec = c(rep(0.8,10),rep(0.7,10),rep(0.6,10))
T2 = ArTFun(T1,lambda = lambda1)
TransMat = c(0,0,0)
TransMat = c(0,0,0)
for(i in 1:nD){
T2 = ArTFun(T1,lambda = lambda1)
nT = length(T2) #total transaction in a day
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
TransMat = rbind(TransMat,c(i,9+round(T2)/60,AmtVec)) #transaction between 9AMto9PM
if(i<nD){
T2 = ArTFun(T1,lambda = lambda2)
nT = length(T2)
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
T2Mod=21+round(T2)/60 #for 9PMto9AM
w = which(T2Mod)>24
if(length(w)>0) T2Mod[w] = T2Mod[w]-24 #Make sure that every thing is in 24 hrs
TransMat = rbind(TransMat,cbind(i,T2Mod,AmtVec))
}
}
TransMat = c(0,0,0)
for(i in 1:nD){
T2 = ArTFun(T1,lambda = lambda1)
nT = length(T2) #total transaction in a day
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
TransMat = rbind(TransMat,c(i,9+round(T2)/60,AmtVec)) #transaction between 9AMto9PM
if(i<nD){
T2 = ArTFun(T1,lambda = lambda2)
nT = length(T2)
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
T2Mod=21+round(T2)/60 #for 9PMto9AM
w = which(T2Mod>=24)
if(length(w)>0) T2Mod[w] = T2Mod[w]-24 #Make sure that every thing is in 24 hrs
TransMat = rbind(TransMat,cbind(i,T2Mod,AmtVec))
}
}
TransMat
length(TransMat)
ArTFun = function(T0,lambda){
i = 1
AT = c()
while(sum(AT)<=T0){
AT[i] = rexp(1,rate=lambda)
i = i+1
}
AT  = cumsum(AT)[-(i-1)]
return(AT)
}
nD = 30 #for three days
T1 = 12*60 #trabsaction on minute level.
lambda1 = 20/60 #arrival rate at day
lambda2 = 7/60 #arrival rate at night
MeanVec = c(rep(log(2000),10),rep(log(1500),10),rep(log(700),10))
SDVec = c(rep(0.8,10),rep(0.7,10),rep(0.6,10))
TransMat = c(0,0,0)
for(i in 1:nD){
T2 = ArTFun(T1,lambda = lambda1)
nT = length(T2) #total transaction in a day
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
TransMat = rbind(TransMat,c(i,9+round(T2)/60,AmtVec)) #transaction between 9AMto9PM
if(i<nD){
T2 = ArTFun(T1,lambda = lambda2)
nT = length(T2)
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
T2Mod=21+round(T2)/60 #for 9PMto9AM
w = which(T2Mod>=24)
if(length(w)>0) T2Mod[w] = T2Mod[w]-24 #Make sure that every thing is in 24 hrs
TransMat = rbind(TransMat,cbind(i,T2Mod,AmtVec))
}
}
ArTFun = function(T0,lambda){
i = 1
AT = c()
while(sum(AT)<=T0){
AT[i] = rexp(1,rate=lambda)
i = i+1
}
AT  = cumsum(AT)[-(i-1)]
return(AT)
}
nD = 30 #for three days
T1 = 12*60 #trabsaction on minute level.
lambda1 = 20/60 #arrival rate at day
lambda2 = 7/60 #arrival rate at night
MeanVec = c(rep(log(2000),10),rep(log(1500),10),rep(log(700),10))
SDVec = c(rep(0.8,10),rep(0.7,10),rep(0.6,10))
TransMat = c(0,0,0)
for(i in 1:nD){
T2 = ArTFun(T1,lambda = lambda1)
nT = length(T2) #total transaction in a day
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
TransMat = rbind(TransMat,c(i,9+round(T2)/60,AmtVec)) #transaction between 9AMto9PM
if(i<nD){
T2 = ArTFun(T1,lambda = lambda2)
nT = length(T2)
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
T2Mod=21+round(T2)/60 #for 9PMto9AM
w = which(T2Mod>=24)
if(length(w)>0) T2Mod[w] = T2Mod[w]-24 #Make sure that every thing is in 24 hrs
TransMat = rbind(TransMat,c(i,T2Mod,AmtVec))
}
}
warning()
warnings()
TransMat = c(0,0,0)
for(i in 1:nD){
T2 = ArTFun(T1,lambda = lambda1)
nT = length(T2) #total transaction in a day
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
TransMat = rbind(TransMat,c(i,9+round(T2)/60,AmtVec)) #transaction between 9AMto9PM
if(i<nD){
T2 = ArTFun(T1,lambda = lambda2)
nT = length(T2)
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
T2Mod=21+round(T2)/60 #for 9PMto9AM
w = which(T2Mod>=24)
if(length(w)>0) T2Mod[w] = T2Mod[w]-24 #Make sure that every thing is in 24 hrs
TransMat = rbind(TransMat,c(i,T2Mod,AmtVec))
}
}
warnings()
View(TransMat)
ArrFun=function(T,lambda)
{
n=1
s=0
AT=c()
while(s<T)
{
AT[n]=rexp(1,rate=lambda)
s=s+AT[n]
n=n+1
}
AVec=cumsum(AT)[-(n-1)]
return(AVec)
}
ArrFun(10,1)
AmtFun=function(n,m,sd)
{
A=rlnorm(n,m,sd)
return(A)
}
V=AmtFun(100,log(2000),0.7)
plot(density(V))
nD=30
T0=12*60
lambda1=20/60 ##Expected no. of people arriving per minute
lambda2=5/60
MeanVec=c(rep(log(2000),10),rep(log(1500),10),rep(log(700),10))
SDVec=c(rep(0.7,10),rep(0.5,10),rep(0.3,10))
TransMat=c(0,0,0)
for(i in 1:nD)
{
T1=ArrFun(T0,lambda1)
nT=length(T1)
AVec=AmtFun(nT,MeanVec[i],SDVec[i])
TransMat=rbind(TransMat,cbind(i,9+round(T1)/60,AVec))
if(i < nD)
{
T2=ArrFun(T0,lambda2)
nT=length(T2)
AVec=AmtFun(nT,MeanVec[i],SDVec[i])
T2Mod1=21+round(T2)/60
w=which(T2Mod1>=24)
if(length(w)!=0) T2Mod1[w]=T2Mod1[w]-24
TransMat=rbind(TransMat,cbind(i,T2Mod1,AVec))
}
}
TransMat=TransMat[-1,]
View(TransMat)
ArTFun = function(T0,lambda){
i = 1
AT = c()
while(sum(AT)<=T0){
AT[i] = rexp(1,rate=lambda)
i = i+1
}
AT  = cumsum(AT)[-(i-1)]
return(AT)
}
nD = 30 #for three days
T1 = 12*60 #trabsaction on minute level.
lambda1 = 20/60 #arrival rate at day
lambda2 = 7/60 #arrival rate at night
MeanVec = c(rep(log(2000),10),rep(log(1500),10),rep(log(700),10))
SDVec = c(rep(0.8,10),rep(0.7,10),rep(0.6,10))
TransMat = c(0,0,0)
for(i in 1:nD){
T2 = ArTFun(T1,lambda = lambda1)
nT = length(T2) #total transaction in a day
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
TransMat = rbind(TransMat,cbind(i,9+round(T2)/60,AmtVec)) #transaction between 9AMto9PM
if(i<nD){
T2 = ArTFun(T1,lambda = lambda2)
nT = length(T2)
AmtVec = rlnorm(nT,MeanVec[i],SDVec[i])
T2Mod=21+round(T2)/60 #for 9PMto9AM
w = which(T2Mod>=24)
if(length(w)>0) T2Mod[w] = T2Mod[w]-24 #Make sure that every thing is in 24 hrs
TransMat = rbind(TransMat,cbind(i,T2Mod,AmtVec))
}
}
View(TransMat)
TransMat = TransMat[-1,]
View(TransMat)
colnames(TransMat) = c("Day","Time","Amount_withdrawal")
View(TransMat)
tail(TransMat)
